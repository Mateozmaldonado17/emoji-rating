{"version":3,"file":"emojiRating.umd.js","sources":["../node_modules/@polymer/polymer/lib/utils/boot.js","../node_modules/@polymer/polymer/lib/utils/mixin.js","../node_modules/@polymer/polymer/lib/utils/async.js","../node_modules/@polymer/polymer/lib/mixins/properties-changed.js","../node_modules/@polymer/polymer/lib/mixins/properties-mixin.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/lit-html/lib/lit-extended.js","../node_modules/lit-html/lib/repeat.js","../src/emojiRating.js","../node_modules/@polymer/lit-element/lit-element.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nwindow.JSCompiler_renameProperty = function(prop) { return prop; };\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\n/* eslint-disable valid-jsdoc */\n/**\n * Wraps an ES6 class expression mixin such that the mixin is only applied\n * if it has not already been applied its base argument. Also memoizes mixin\n * applications.\n *\n * @template T\n * @param {T} mixin ES6 class expression mixin to wrap\n * @return {T}\n * @suppress {invalidCasts}\n */\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return /** @type {T} */ (dedupingMixin);\n};\n/* eslint-enable valid-jsdoc */\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @fileoverview\n *\n * This module provides a number of strategies for enqueuing asynchronous\n * tasks. Each sub-module provides a standard `run(fn)` interface that returns a\n * handle, and a `cancel(handle)` interface for canceling async tasks before\n * they run.\n *\n * @summary Module that provides a number of strategies for enqueuing\n * asynchronous tasks.\n */\n\nimport './boot.js';\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\n/**\n * Async interface wrapper around `setTimeout`.\n *\n * @namespace\n * @summary Async interface wrapper around `setTimeout`.\n */\nconst timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof timeOut\n   * @param {number=} delay Time to wait before calling callbacks in ms\n   * @return {!AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return {\n      run(fn) { return window.setTimeout(fn, delay); },\n      cancel(handle) {\n        window.clearTimeout(handle);\n      }\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof timeOut\n   * @param {!Function} fn Callback to run\n   * @param {number=} delay Delay in milliseconds\n   * @return {number} Handle used for canceling task\n   */\n  run(fn, delay) {\n    return window.setTimeout(fn, delay);\n  },\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.clearTimeout(handle);\n  }\n};\nexport {timeOut};\n\n/**\n * Async interface wrapper around `requestAnimationFrame`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestAnimationFrame`.\n */\nconst animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof animationFrame\n   * @param {function(number):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestAnimationFrame(fn);\n  },\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof animationFrame\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelAnimationFrame(handle);\n  }\n};\nexport {animationFrame};\n\n/**\n * Async interface wrapper around `requestIdleCallback`.  Falls back to\n * `setTimeout` on browsers that do not support `requestIdleCallback`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestIdleCallback`.\n */\nconst idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof idlePeriod\n   * @param {function(!IdleDeadline):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\nexport {idlePeriod};\n\n/**\n * Async interface for enqueuing callbacks that run at microtask timing.\n *\n * Note that microtask timing is achieved via a single `MutationObserver`,\n * and thus callbacks enqueued with this API will all run in a single\n * batch, and not interleaved with other microtasks such as promises.\n * Promises are avoided as an implementation choice for the time being\n * due to Safari bugs that cause Promises to lack microtask guarantees.\n *\n * @namespace\n * @summary Async interface for enqueuing callbacks that run at microtask\n *   timing.\n */\nconst microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof microTask\n   * @param {!Function=} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\nexport {microTask};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { microTask } from '../utils/async.js';\n\n/** @const {!AsyncInterface} */\nconst microtask = microTask;\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin, call `MyClass.createProperties(props)`\n * once at class definition time to create property accessors for properties\n * named in props, implement `_propertiesChanged` to react as desired to\n * property changes, and implement `static get observedAttributes()` and\n * include lowercase versions of any property names that should be set from\n * attributes. Last, call `this._enableProperties()` in the element's\n * `connectedCallback` to enable the accessors.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n */\nexport const PropertiesChanged = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @extends {superClass}\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n  class PropertiesChanged extends superClass {\n\n    /**\n     * Creates property accessors for the given property names.\n     * @param {!Object} props Object whose keys are names of accessors.\n     * @return {void}\n     * @protected\n     */\n    static createProperties(props) {\n      const proto = this.prototype;\n      for (let prop in props) {\n        // don't stomp an existing accessor\n        if (!(prop in proto)) {\n          proto._createPropertyAccessor(prop);\n        }\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * The attribute name is the lowercased property name. Override to\n     * customize this mapping.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     */\n    static attributeNameForProperty(property) {\n      return property.toLowerCase();\n    }\n\n    /**\n     * Override point to provide a type to which to deserialize a value to\n     * a given property.\n     * @param {string} name Name of property\n     *\n     * @protected\n     */\n    static typeForProperty(name) { } //eslint-disable-line no-unused-vars\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @return {void}\n     * @protected\n     */\n    _createPropertyAccessor(property, readOnly) {\n      this._addPropertyToAttributeMap(property);\n      if (!this.hasOwnProperty('__dataHasAccessor')) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        this._definePropertyAccessor(property, readOnly);\n      }\n    }\n\n    /**\n     * Adds the given `property` to a map matching attribute names\n     * to property names, using `attributeNameForProperty`. This map is\n     * used when deserializing attribute values to properties.\n     *\n     * @param {string} property Name of the property\n     */\n    _addPropertyToAttributeMap(property) {\n      if (!this.hasOwnProperty('__dataAttributes')) {\n        this.__dataAttributes = Object.assign({}, this.__dataAttributes);\n      }\n      if (!this.__dataAttributes[property]) {\n        const attr = this.constructor.attributeNameForProperty(property);\n        this.__dataAttributes[attr] = property;\n      }\n    }\n\n    /**\n     * Defines a property accessor for the given property.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     * @return {void}\n     */\n     _definePropertyAccessor(property, readOnly) {\n      Object.defineProperty(this, property, {\n        /* eslint-disable valid-jsdoc */\n        /** @this {PropertiesChanged} */\n        get() {\n          return this._getProperty(property);\n        },\n        /** @this {PropertiesChanged} */\n        set: readOnly ? function () {} : function (value) {\n          this._setProperty(property, value);\n        }\n        /* eslint-enable */\n      });\n    }\n\n    constructor() {\n      super();\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      this.__dataInstanceProps = null;\n      this.__serializing = false;\n      this._initializeProperties();\n    }\n\n    /**\n     * Lifecycle callback called when properties are enabled via\n     * `_enableProperties`.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its property data initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @return {void}\n     * @public\n     */\n    ready() {\n      this.__dataReady = true;\n      this._flushProperties();\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @return {void}\n     * @protected\n     */\n    _initializeProperties() {\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     * @protected\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Returns the value for the given property.\n     * @param {string} property Name of property\n     * @return {*} Value for the given property\n     * @protected\n     */\n    _getProperty(property) {\n      return this.__data[property];\n    }\n\n    /* eslint-disable no-unused-vars */\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} ext Not used here; affordance for closure\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     */\n    _setPendingProperty(property, value, ext) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n    /* eslint-enable */\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @return {void}\n     * @protected\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     *\n     * @return {void}\n     * @protected\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     * @return {void}\n     * @protected\n     */\n    _flushProperties() {\n      const props = this.__data;\n      const changedProps = this.__dataPending;\n      const old = this.__dataOld;\n      if (this._shouldPropertiesChange(props, changedProps, old)) {\n        this.__dataPending = null;\n        this.__dataOld = null;\n        this._propertiesChanged(props, changedProps, old);\n      }\n    }\n\n    /**\n     * Called in `_flushProperties` to determine if `_propertiesChanged`\n     * should be called. The default implementation returns true if\n     * properties are pending. Override to customize when\n     * `_propertiesChanged` is called.\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {boolean} true if changedProps is truthy\n     */\n    _shouldPropertiesChange(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      return Boolean(changedProps);\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     * @protected\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` if a strict equality\n     * check fails. The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n          // This ensures (old==NaN, value==NaN) always returns false\n          (old === old || value === value))\n      );\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @param {?string} namespace Attribute namespace.\n     * @return {void}\n     * @suppress {missingProperties} Super may or may not implement the callback\n     */\n    attributeChangedCallback(name, old, value, namespace) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n      if (super.attributeChangedCallback) {\n        super.attributeChangedCallback(name, old, value, namespace);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to, defaults to the value\n     * returned from `typeForProperty`\n     * @return {void}\n     */\n    _attributeToProperty(attribute, value, type) {\n      if (!this.__serializing) {\n        const map = this.__dataAttributes;\n        const property = map && map[attribute] || attribute;\n        this[property] = this._deserializeValue(value, type ||\n          this.constructor.typeForProperty(property));\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is an element.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect to.\n     * @param {*=} value Property value to refect.\n     * @return {void}\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,\n        attribute || this.constructor.attributeNameForProperty(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     * @return {void}\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      const str = this._serializeValue(value);\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called when setting JS property values to\n     * HTML attributes.  Users may override this method to provide\n     * serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided\n     * property  value.\n     */\n    _serializeValue(value) {\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called when reading HTML attribute values to\n     * JS properties.  Users may override this method to provide\n     * deserialization for custom `type`s. Types for `Boolean`, `String`,\n     * and `Number` convert attributes to the expected types.\n     *\n     * @param {?string} value Value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      switch (type) {\n        case Boolean:\n          return (value !== null);\n        case Number:\n          return Number(value);\n        default:\n          return value;\n      }\n    }\n\n  }\n\n  return PropertiesChanged;\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n/**\n * Creates a copy of `props` with each property normalized such that\n * upgraded it is an object with at least a type property { type: Type}.\n *\n * @param {Object} props Properties to normalize\n * @return {Object} Copy of input `props` with normalized properties that\n * are in the form {type: Type}\n * @private\n */\nfunction normalizeProperties(props) {\n  const output = {};\n  for (let p in props) {\n    const o = props[p];\n    output[p] = (typeof o === 'function') ? {type: o} : o;\n  }\n  return output;\n}\n\n/**\n * Mixin that provides a minimal starting point to using the PropertiesChanged\n * mixin by providing a mechanism to declare properties in a static\n * getter (e.g. static get properties() { return { foo: String } }). Changes\n * are reported via the `_propertiesChanged` method.\n *\n * This mixin provides no specific support for rendering. Users are expected\n * to create a ShadowRoot and put content into it and update it in whatever\n * way makes sense. This can be done in reaction to properties changing by\n * implementing `_propertiesChanged`.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Mixin that provides a minimal starting point for using\n * the PropertiesChanged mixin by providing a declarative `properties` object.\n */\nexport const PropertiesMixin = dedupingMixin(superClass => {\n\n /**\n  * @constructor\n  * @extends {superClass}\n  * @implements {Polymer_PropertiesChanged}\n  */\n const base = PropertiesChanged(superClass);\n\n /**\n  * Returns the super class constructor for the given class, if it is an\n  * instance of the PropertiesMixin.\n  *\n  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {PropertiesMixinConstructor} Super class constructor\n  */\n function superPropertiesClass(constructor) {\n   const superCtor = Object.getPrototypeOf(constructor);\n\n   // Note, the `PropertiesMixin` class below only refers to the class\n   // generated by this call to the mixin; the instanceof test only works\n   // because the mixin is deduped and guaranteed only to apply once, hence\n   // all constructors in a proto chain will see the same `PropertiesMixin`\n   return (superCtor.prototype instanceof PropertiesMixin) ?\n     /** @type {PropertiesMixinConstructor} */ (superCtor) : null;\n }\n\n /**\n  * Returns a memoized version of the `properties` object for the\n  * given class. Properties not in object format are converted to at\n  * least {type}.\n  *\n  * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {Object} Memoized properties object\n  */\n function ownProperties(constructor) {\n   if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {\n     let props = null;\n\n     if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor)) && constructor.properties) {\n       props = normalizeProperties(constructor.properties);\n     }\n\n     constructor.__ownProperties = props;\n   }\n   return constructor.__ownProperties;\n }\n\n /**\n  * @polymer\n  * @mixinClass\n  * @extends {base}\n  * @implements {Polymer_PropertiesMixin}\n  * @unrestricted\n  */\n class PropertiesMixin extends base {\n\n   /**\n    * Implements standard custom elements getter to observes the attributes\n    * listed in `properties`.\n    * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n    */\n   static get observedAttributes() {\n     const props = this._properties;\n     return props ? Object.keys(props).map(p => this.attributeNameForProperty(p)) : [];\n   }\n\n   /**\n    * Finalizes an element definition, including ensuring any super classes\n    * are also finalized. This includes ensuring property\n    * accessors exist on the element prototype. This method calls\n    * `_finalizeClass` to finalize each constructor in the prototype chain.\n    * @return {void}\n    */\n   static finalize() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {\n       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));\n       if (superCtor) {\n         superCtor.finalize();\n       }\n       this.__finalized = true;\n       this._finalizeClass();\n     }\n   }\n\n   /**\n    * Finalize an element class. This includes ensuring property\n    * accessors exist on the element prototype. This method is called by\n    * `finalize` and finalizes the class constructor.\n    *\n    * @protected\n    */\n   static _finalizeClass() {\n     const props = ownProperties(/** @type {PropertiesMixinConstructor} */(this));\n     if (props) {\n       this.createProperties(props);\n     }\n   }\n\n   /**\n    * Returns a memoized version of all properties, including those inherited\n    * from super classes. Properties not in object format are converted to\n    * at least {type}.\n    *\n    * @return {Object} Object containing properties for this class\n    * @protected\n    */\n   static get _properties() {\n     if (!this.hasOwnProperty(\n       JSCompiler_renameProperty('__properties', this))) {\n       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));\n       this.__properties = Object.assign({},\n         superCtor && superCtor._properties,\n         ownProperties(/** @type {PropertiesMixinConstructor} */(this)));\n     }\n     return this.__properties;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method to return type specified in the\n    * static `properties` object for the given property.\n    * @param {string} name Name of property\n    * @return {*} Type to which to deserialize attribute\n    *\n    * @protected\n    */\n   static typeForProperty(name) {\n     const info = this._properties[name];\n     return info && info.type;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method and adds a call to\n    * `finalize` which lazily configures the element's property accessors.\n    * @override\n    * @return {void}\n    */\n   _initializeProperties() {\n     this.constructor.finalize();\n     super._initializeProperties();\n   }\n\n   /**\n    * Called when the element is added to a document.\n    * Calls `_enableProperties` to turn on property system from\n    * `PropertiesChanged`.\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    */\n   connectedCallback() {\n     if (super.connectedCallback) {\n       super.connectedCallback();\n     }\n     this._enableProperties();\n   }\n\n   /**\n    * Called when the element is removed from a document\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    */\n   disconnectedCallback() {\n     if (super.disconnectedCallback) {\n       super.disconnectedCallback();\n     }\n   }\n\n }\n\n return PropertiesMixin;\n\n});\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html');\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg');\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, partCallback = defaultPartCallback) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.partCallback = partCallback;\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            // We're in a text position if the previous string closed its tags.\n            // If it doesn't have any tags, then we use the previous text position\n            // state.\n            const closing = findTagClose(s);\n            isTextBinding = closing > -1 ? closing < s.length : isTextBinding;\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an <svg> tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the <svg> tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function defaultTemplateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param templateFactory a function to create a Template or retreive one from\n *     cache.\n */\nexport function render(result, container, templateFactory = defaultTemplateFactory) {\n    const template = templateFactory(result);\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === template &&\n        instance._partCallback === result.partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance =\n        new TemplateInstance(template, result.partCallback, templateFactory);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    removeNodes(container, container.firstChild);\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nconst marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-posisitions, not attribute positions,\n * in template.\n */\nconst nodeMarker = `<!--${marker}-->`;\nconst markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*)$/;\n/**\n * Finds the closing index of the last closed HTML tag.\n * This has 3 possible return values:\n *   - `-1`, meaning there is no tag in str.\n *   - `string.length`, meaning the last opened tag is unclosed.\n *   - Some positive number < str.length, meaning the index of the closing '>'.\n */\nfunction findTagClose(str) {\n    const close = str.lastIndexOf('>');\n    const open = str.indexOf('<', close + 1);\n    return open > -1 ? str.length : close;\n}\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport class TemplatePart {\n    constructor(type, index, name, rawName, strings) {\n        this.type = type;\n        this.index = index;\n        this.name = name;\n        this.rawName = rawName;\n        this.strings = strings;\n    }\n}\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const content = this.element.content;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n               NodeFilter.SHOW_TEXT */, null, false);\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        // The actual previous node, accounting for removals: if a node is removed\n        // it will never be the previousNode.\n        let previousNode;\n        // Used to set previousNode at the top of the loop.\n        let currentNode;\n        while (walker.nextNode()) {\n            index++;\n            previousNode = currentNode;\n            const node = currentNode = walker.currentNode;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (!node.hasAttributes()) {\n                    continue;\n                }\n                const attributes = node.attributes;\n                // Per https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                // attributes are not guaranteed to be returned in document order. In\n                // particular, Edge/IE can return them out of order, so we cannot assume\n                // a correspondance between part index and attribute index.\n                let count = 0;\n                for (let i = 0; i < attributes.length; i++) {\n                    if (attributes[i].value.indexOf(marker) >= 0) {\n                        count++;\n                    }\n                }\n                while (count-- > 0) {\n                    // Get the template literal section leading up to the first\n                    // expression in this attribute attribute\n                    const stringForPart = result.strings[partIndex];\n                    // Find the attribute name\n                    const attributeNameInPart = lastAttributeNameRegex.exec(stringForPart)[1];\n                    // Find the corresponding attribute\n                    // TODO(justinfagnani): remove non-null assertion\n                    const attribute = attributes.getNamedItem(attributeNameInPart);\n                    const stringsForAttributeValue = attribute.value.split(markerRegex);\n                    this.parts.push(new TemplatePart('attribute', index, attribute.name, attributeNameInPart, stringsForAttributeValue));\n                    node.removeAttribute(attribute.name);\n                    partIndex += stringsForAttributeValue.length - 1;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const nodeValue = node.nodeValue;\n                if (nodeValue.indexOf(marker) < 0) {\n                    continue;\n                }\n                const parent = node.parentNode;\n                const strings = nodeValue.split(markerRegex);\n                const lastIndex = strings.length - 1;\n                // We have a part for each match found\n                partIndex += lastIndex;\n                // Generate a new text node for each literal section\n                // These nodes are also used as the markers for node parts\n                for (let i = 0; i < lastIndex; i++) {\n                    parent.insertBefore((strings[i] === '')\n                        ? document.createComment('')\n                        : document.createTextNode(strings[i]), node);\n                    this.parts.push(new TemplatePart('node', index++));\n                }\n                parent.insertBefore(strings[lastIndex] === '' ?\n                    document.createComment('') :\n                    document.createTextNode(strings[lastIndex]), node);\n                nodesToRemove.push(node);\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */ &&\n                node.nodeValue === marker) {\n                const parent = node.parentNode;\n                // Add a new marker node to be the startNode of the Part if any of the\n                // following are true:\n                //  * We don't have a previousSibling\n                //  * previousSibling is being removed (thus it's not the\n                //    `previousNode`)\n                //  * previousSibling is not a Text node\n                //\n                // TODO(justinfagnani): We should be able to use the previousNode here\n                // as the marker node and reduce the number of extra nodes we add to a\n                // template. See https://github.com/PolymerLabs/lit-html/issues/147\n                const previousSibling = node.previousSibling;\n                if (previousSibling === null || previousSibling !== previousNode ||\n                    previousSibling.nodeType !== Node.TEXT_NODE) {\n                    parent.insertBefore(document.createComment(''), node);\n                }\n                else {\n                    index--;\n                }\n                this.parts.push(new TemplatePart('node', index++));\n                nodesToRemove.push(node);\n                // If we don't have a nextSibling add a marker node.\n                // We don't have to check if the next node is going to be removed,\n                // because that node will induce a new marker if so.\n                if (node.nextSibling === null) {\n                    parent.insertBefore(document.createComment(''), node);\n                }\n                else {\n                    index--;\n                }\n                currentNode = previousNode;\n                partIndex++;\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\n/**\n * Returns a value ready to be inserted into a Part from a user-provided value.\n *\n * If the user value is a directive, this invokes the directive with the given\n * part. If the value is null, it's converted to undefined to work better\n * with certain DOM APIs, like textContent.\n */\nexport const getValue = (part, value) => {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (isDirective(value)) {\n        value = value(part);\n        return directiveValue;\n    }\n    return value === null ? undefined : value;\n};\nexport const directive = (f) => {\n    f.__litDirective = true;\n    return f;\n};\nconst isDirective = (o) => typeof o === 'function' && o.__litDirective === true;\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const directiveValue = {};\nconst isPrimitiveValue = (value) => value === null ||\n    !(typeof value === 'object' || typeof value === 'function');\nexport class AttributePart {\n    constructor(instance, element, name, strings) {\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n        this._previousValues = [];\n    }\n    _interpolate(values, startIndex) {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const v = getValue(this, values[startIndex + i]);\n            if (v && v !== directiveValue &&\n                (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                for (const t of v) {\n                    // TODO: we need to recursively call getValue into iterables...\n                    text += t;\n                }\n            }\n            else {\n                text += v;\n            }\n        }\n        return text + strings[l];\n    }\n    _equalToPreviousValues(values, startIndex) {\n        for (let i = startIndex; i < startIndex + this.size; i++) {\n            if (this._previousValues[i] !== values[i] ||\n                !isPrimitiveValue(values[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    setValue(values, startIndex) {\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        const s = this.strings;\n        let value;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n            if (Array.isArray(value)) {\n                value = value.join('');\n            }\n        }\n        else {\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== directiveValue) {\n            this.element.setAttribute(this.name, value);\n        }\n        this._previousValues = values;\n    }\n}\nexport class NodePart {\n    constructor(instance, startNode, endNode) {\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n        this._previousValue = undefined;\n    }\n    setValue(value) {\n        value = getValue(this, value);\n        if (value === directiveValue) {\n            return;\n        }\n        if (isPrimitiveValue(value)) {\n            // Handle primitive values\n            // If the value didn't change, do nothing\n            if (value === this._previousValue) {\n                return;\n            }\n            this._setText(value);\n        }\n        else if (value instanceof TemplateResult) {\n            this._setTemplateResult(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._setIterable(value);\n        }\n        else if (value instanceof Node) {\n            this._setNode(value);\n        }\n        else if (value.then !== undefined) {\n            this._setPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._setText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _setNode(value) {\n        if (this._previousValue === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this._previousValue = value;\n    }\n    _setText(value) {\n        const node = this.startNode.nextSibling;\n        value = value === undefined ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if _previousValue is\n            // primitive?\n            node.textContent = value;\n        }\n        else {\n            this._setNode(document.createTextNode(value));\n        }\n        this._previousValue = value;\n    }\n    _setTemplateResult(value) {\n        const template = this.instance._getTemplate(value);\n        let instance;\n        if (this._previousValue && this._previousValue.template === template) {\n            instance = this._previousValue;\n        }\n        else {\n            instance = new TemplateInstance(template, this.instance._partCallback, this.instance._getTemplate);\n            this._setNode(instance._clone());\n            this._previousValue = instance;\n        }\n        instance.update(value.values);\n    }\n    _setIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _previousValue is an array, then the previous render was of an\n        // iterable and _previousValue will contain the NodeParts from the previous\n        // render. If _previousValue is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this._previousValue)) {\n            this.clear();\n            this._previousValue = [];\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._previousValue;\n        let partIndex = 0;\n        for (const item of value) {\n            // Try to reuse an existing part\n            let itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                // If we're creating the first item part, it's startNode should be the\n                // container's startNode\n                let itemStart = this.startNode;\n                // If we're not creating the first part, create a new separator marker\n                // node, and fix up the previous part's endNode to point to it\n                if (partIndex > 0) {\n                    const previousPart = itemParts[partIndex - 1];\n                    itemStart = previousPart.endNode = document.createTextNode('');\n                    this._insert(itemStart);\n                }\n                itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                itemParts.push(itemPart);\n            }\n            itemPart.setValue(item);\n            partIndex++;\n        }\n        if (partIndex === 0) {\n            this.clear();\n            this._previousValue = undefined;\n        }\n        else if (partIndex < itemParts.length) {\n            const lastPart = itemParts[partIndex - 1];\n            // Truncate the parts array so _previousValue reflects the current state\n            itemParts.length = partIndex;\n            this.clear(lastPart.endNode.previousSibling);\n            lastPart.endNode = this.endNode;\n        }\n    }\n    _setPromise(value) {\n        this._previousValue = value;\n        value.then((v) => {\n            if (this._previousValue === value) {\n                this.setValue(v);\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\nexport const defaultPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    }\n    else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error(`Unknown part type ${templatePart.type}`);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, partCallback, getTemplate) {\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n        this._getTemplate = getTemplate;\n    }\n    update(values) {\n        let valueIndex = 0;\n        for (const part of this._parts) {\n            if (part.size === undefined) {\n                part.setValue(values[valueIndex]);\n                valueIndex++;\n            }\n            else {\n                part.setValue(values, valueIndex);\n                valueIndex += part.size;\n            }\n        }\n    }\n    _clone() {\n        const fragment = document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        if (parts.length > 0) {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            let index = -1;\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                while (index < part.index) {\n                    index++;\n                    walker.nextNode();\n                }\n                this._parts.push(this._partCallback(this, part, walker.currentNode));\n            }\n        }\n        return fragment;\n    }\n}\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { render as baseRender, Template, templateCaches } from '../lit-html.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = `${result.type}--${scopeName}`;\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (typeof window.ShadyCSS === 'object') {\n            window.ShadyCSS.prepareTemplate(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.set(result.strings, template);\n    }\n    return template;\n};\nexport function render(result, container, scopeName) {\n    return baseRender(result, container, shadyTemplateFactory(scopeName));\n}\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, defaultPartCallback, directiveValue, getValue, SVGTemplateResult, TemplateResult } from '../lit-html.js';\nexport { render } from '../lit-html.js';\n/**\n * Interprets a template literal as a lit-extended HTML template.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', extendedPartCallback);\n/**\n * Interprets a template literal as a lit-extended SVG template.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', extendedPartCallback);\n/**\n * A PartCallback which allows templates to set properties and declarative\n * event handlers.\n *\n * Properties are set by default, instead of attributes. Attribute names in\n * lit-html templates preserve case, so properties are case sensitive. If an\n * expression takes up an entire attribute value, then the property is set to\n * that value. If an expression is interpolated with a string or other\n * expressions then the property is set to the string result of the\n * interpolation.\n *\n * To set an attribute instead of a property, append a `$` suffix to the\n * attribute name.\n *\n * Example:\n *\n *     html`<button class$=\"primary\">Buy Now</button>`\n *\n * To set an event handler, prefix the attribute name with `on-`:\n *\n * Example:\n *\n *     html`<button on-click=${(e)=> this.onClickHandler(e)}>Buy Now</button>`\n *\n */\nexport const extendedPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        if (templatePart.rawName.substr(0, 3) === 'on-') {\n            const eventName = templatePart.rawName.slice(3);\n            return new EventPart(instance, node, eventName);\n        }\n        const lastChar = templatePart.name.substr(templatePart.name.length - 1);\n        if (lastChar === '$') {\n            const name = templatePart.name.slice(0, -1);\n            return new AttributePart(instance, node, name, templatePart.strings);\n        }\n        if (lastChar === '?') {\n            const name = templatePart.name.slice(0, -1);\n            return new BooleanAttributePart(instance, node, name, templatePart.strings);\n        }\n        return new PropertyPart(instance, node, templatePart.rawName, templatePart.strings);\n    }\n    return defaultPartCallback(instance, templatePart, node);\n};\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            const value = getValue(this, values[startIndex]);\n            if (value === directiveValue) {\n                return;\n            }\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        else {\n            throw new Error('boolean attributes can only contain a single expression');\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        let value;\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n        }\n        else {\n            // Interpolation, so interpolate\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== directiveValue) {\n            this.element[this.name] = value;\n        }\n        this._previousValues = values;\n    }\n}\nexport class EventPart {\n    constructor(instance, element, eventName) {\n        this.instance = instance;\n        this.element = element;\n        this.eventName = eventName;\n    }\n    setValue(value) {\n        const listener = getValue(this, value);\n        if (listener === this._listener) {\n            return;\n        }\n        if (listener == null) {\n            this.element.removeEventListener(this.eventName, this);\n        }\n        else if (this._listener == null) {\n            this.element.addEventListener(this.eventName, this);\n        }\n        this._listener = listener;\n    }\n    handleEvent(event) {\n        if (typeof this._listener === 'function') {\n            this._listener.call(this.element, event);\n        }\n        else if (typeof this._listener.handleEvent === 'function') {\n            this._listener.handleEvent(event);\n        }\n    }\n}\n//# sourceMappingURL=lit-extended.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { directive, NodePart, removeNodes, reparentNodes } from '../lit-html.js';\nconst keyMapCache = new WeakMap();\nfunction cleanMap(part, key, map) {\n    if (!part.startNode.parentNode) {\n        map.delete(key);\n    }\n}\nexport function repeat(items, keyFnOrTemplate, template) {\n    let keyFn;\n    if (arguments.length === 2) {\n        template = keyFnOrTemplate;\n    }\n    else if (arguments.length === 3) {\n        keyFn = keyFnOrTemplate;\n    }\n    return directive((part) => {\n        if (!(part instanceof NodePart)) {\n            throw new Error('repeat can only be used on NodeParts');\n        }\n        let keyMap = keyMapCache.get(part);\n        if (keyMap === undefined) {\n            keyMap = new Map();\n            keyMapCache.set(part, keyMap);\n        }\n        const container = part.startNode.parentNode;\n        let index = -1;\n        let currentMarker = part.startNode.nextSibling;\n        for (const item of items) {\n            let result;\n            let key;\n            try {\n                ++index;\n                result = template(item, index);\n                key = keyFn ? keyFn(item) : index;\n            }\n            catch (e) {\n                console.error(e);\n                continue;\n            }\n            // Try to reuse a part\n            let itemPart = keyMap.get(key);\n            if (itemPart === undefined) {\n                const marker = document.createTextNode('');\n                const endNode = document.createTextNode('');\n                container.insertBefore(marker, currentMarker);\n                container.insertBefore(endNode, currentMarker);\n                itemPart = new NodePart(part.instance, marker, endNode);\n                if (key !== undefined) {\n                    keyMap.set(key, itemPart);\n                }\n            }\n            else if (currentMarker !== itemPart.startNode) {\n                // Existing part in the wrong position\n                const end = itemPart.endNode.nextSibling;\n                if (currentMarker !== end) {\n                    reparentNodes(container, itemPart.startNode, end, currentMarker);\n                }\n            }\n            else {\n                // else part is in the correct position already\n                currentMarker = itemPart.endNode.nextSibling;\n            }\n            itemPart.setValue(result);\n        }\n        // Cleanup\n        if (currentMarker !== part.endNode) {\n            removeNodes(container, currentMarker, part.endNode);\n            keyMap.forEach(cleanMap);\n        }\n    });\n}\n//# sourceMappingURL=repeat.js.map","import { html, LitElement } from '@polymer/lit-element';\nimport { repeat } from 'lit-html/lib/repeat';\n\nexport default class EmojiRating extends LitElement {\n  static get properties() {\n    return { value: Number, min: Number, max: Number, emoji: String };\n  }\n\n  constructor() {\n    super();\n    this.min = 0;\n    this.max = 5;\n    this.value = 0;\n    this.emoji = '🐼';\n    this._renderEmoji = this._renderEmoji.bind(this);\n    this._setValueOnClick = this._setValueOnClick.bind(this);\n  }\n\n  _render({ min, max, value, emoji }) {\n    const emojiArray = [...emoji.repeat(max)];\n    return html`\n    <style>\n      .rating {\n        display: flex;\n        font-size: 3em;\n      }\n      .emoji {\n        cursor: pointer;\n        color: rgba(0, 0, 0, 0);\n        text-shadow: 0px 0px 0px var(--emoji-rating-unselected-color, #444);\n      }\n      .emoji.active { color: rgba(0, 0, 0, 1); }\n    </style>\n    <div class=\"rating\" aria-role=\"range\" aria-valuemin$=\"${min}\" aria-valuemax$=\"${max}\" aria-valuenow$=\"${value}\">\n      ${repeat(emojiArray, (emoji, idx) => idx, this._renderEmoji)}\n    </div>\n    `;\n  }\n\n  async _setValueOnClick(evt) {\n    const value = parseInt(evt.target.dataset.idx, 10) + 1;\n    this.value = value;\n    await this.renderComplete;\n    return this.value;\n  }\n\n  _renderEmoji(emoji, idx) {\n    const value = this.value;\n    return html`<div class$=\"emoji ${\n      idx < value ? 'active' : ''\n    }\" data-idx$=\"${idx}\" on-click=\"${this._setValueOnClick}\">${emoji}</div>`;\n  }\n}\n\ncustomElements.define('emoji-rating', EmojiRating);\n","import { PropertiesMixin } from '@polymer/polymer/lib/mixins/properties-mixin.js';\nimport { camelToDashCase } from '@polymer/polymer/lib/utils/case-map.js';\nimport { render } from 'lit-html/lib/shady-render.js';\nexport { html } from 'lit-html/lib/lit-extended.js';\n/**\n * Renders attributes to the given element based on the `attrInfo` object where\n * boolean values are added/removed as attributes.\n * @param element Element on which to set attributes.\n * @param attrInfo Object describing attributes.\n */\nexport function renderAttributes(element, attrInfo) {\n    for (const a in attrInfo) {\n        const v = attrInfo[a] === true ? '' : attrInfo[a];\n        if (v || v === '' || v === 0) {\n            if (element.getAttribute(a) !== v) {\n                element.setAttribute(a, v);\n            }\n        }\n        else if (element.hasAttribute(a)) {\n            element.removeAttribute(a);\n        }\n    }\n}\n/**\n * Returns a string of css class names formed by taking the properties\n * in the `classInfo` object and appending the property name to the string of\n * class names if the property value is truthy.\n * @param classInfo\n */\nexport function classString(classInfo) {\n    const o = [];\n    for (const name in classInfo) {\n        const v = classInfo[name];\n        if (v) {\n            o.push(name);\n        }\n    }\n    return o.join(' ');\n}\n/**\n * Returns a css style string formed by taking the properties in the `styleInfo`\n * object and appending the property name (dash-cased) colon the\n * property value. Properties are separated by a semi-colon.\n * @param styleInfo\n */\nexport function styleString(styleInfo) {\n    const o = [];\n    for (const name in styleInfo) {\n        const v = styleInfo[name];\n        if (v || v === 0) {\n            o.push(`${camelToDashCase(name)}: ${v}`);\n        }\n    }\n    return o.join('; ');\n}\nexport class LitElement extends PropertiesMixin(HTMLElement) {\n    constructor() {\n        super(...arguments);\n        this.__renderComplete = null;\n        this.__resolveRenderComplete = null;\n        this.__isInvalid = false;\n        this.__isChanging = false;\n    }\n    /**\n     * Override which sets up element rendering by calling* `_createRoot`\n     * and `_firstRendered`.\n     */\n    ready() {\n        this._root = this._createRoot();\n        super.ready();\n        this._firstRendered();\n    }\n    /**\n     * Called after the element DOM is rendered for the first time.\n     * Implement to perform tasks after first rendering like capturing a\n     * reference to a static node which must be directly manipulated.\n     * This should not be commonly needed. For tasks which should be performed\n     * before first render, use the element constructor.\n     */\n    _firstRendered() { }\n    /**\n     * Implement to customize where the element's template is rendered by\n     * returning an element into which to render. By default this creates\n     * a shadowRoot for the element. To render into the element's childNodes,\n     * return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    _createRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Override which returns the value of `_shouldRender` which users\n     * should implement to control rendering. If this method returns false,\n     * _propertiesChanged will not be called and no rendering will occur even\n     * if property values change or `_requestRender` is called.\n     * @param _props Current element properties\n     * @param _changedProps Changing element properties\n     * @param _prevProps Previous element properties\n     * @returns {boolean} Default implementation always returns true.\n     */\n    _shouldPropertiesChange(_props, _changedProps, _prevProps) {\n        const shouldRender = this._shouldRender(_props, _changedProps, _prevProps);\n        if (!shouldRender && this.__resolveRenderComplete) {\n            this.__resolveRenderComplete(false);\n        }\n        return shouldRender;\n    }\n    /**\n     * Implement to control if rendering should occur when property values\n     * change or `_requestRender` is called. By default, this method always\n     * returns true, but this can be customized as an optimization to avoid\n     * rendering work when changes occur which should not be rendered.\n     * @param _props Current element properties\n     * @param _changedProps Changing element properties\n     * @param _prevProps Previous element properties\n     * @returns {boolean} Default implementation always returns true.\n     */\n    _shouldRender(_props, _changedProps, _prevProps) {\n        return true;\n    }\n    /**\n     * Override which performs element rendering by calling\n     * `_render`, `_applyRender`, and finally `_didRender`.\n     * @param props Current element properties\n     * @param changedProps Changing element properties\n     * @param prevProps Previous element properties\n     */\n    _propertiesChanged(props, changedProps, prevProps) {\n        super._propertiesChanged(props, changedProps, prevProps);\n        const result = this._render(props);\n        if (result && this._root !== undefined) {\n            this._applyRender(result, this._root);\n        }\n        this._didRender(props, changedProps, prevProps);\n        if (this.__resolveRenderComplete) {\n            this.__resolveRenderComplete(true);\n        }\n    }\n    _flushProperties() {\n        this.__isChanging = true;\n        this.__isInvalid = false;\n        super._flushProperties();\n        this.__isChanging = false;\n    }\n    /**\n     * Override which warns when a user attempts to change a property during\n     * the rendering lifecycle. This is an anti-pattern and should be avoided.\n     * @param property {string}\n     * @param value {any}\n     * @param old {any}\n     */\n    _shouldPropertyChange(property, value, old) {\n        const change = super._shouldPropertyChange(property, value, old);\n        if (change && this.__isChanging) {\n            console.trace(`Setting properties in response to other properties changing ` +\n                `considered harmful. Setting '${property}' from ` +\n                `'${this._getProperty(property)}' to '${value}'.`);\n        }\n        return change;\n    }\n    /**\n     * Implement to describe the DOM which should be rendered in the element.\n     * Ideally, the implementation is a pure function using only props to describe\n     * the element template. The implementation must a `lit-html` TemplateResult.\n     * By default this template is rendered into the element's shadowRoot.\n     * This can be customized by implementing `_createRoot`. This method must be\n     * implemented.\n     * @param {*} _props Current element properties\n     * @returns {TemplateResult} Must return a lit-html TemplateResult.\n     */\n    _render(_props) {\n        throw new Error('_render() not implemented');\n    }\n    /**\n     * Renders the given lit-html template `result` into the given `node`.\n     * Implement to customize the way rendering is applied. This is should not\n     * typically be needed and is provided for advanced use cases.\n     * @param result {TemplateResult} `lit-html` template result to render\n     * @param node {Element|DocumentFragment} node into which to render\n     */\n    _applyRender(result, node) {\n        render(result, node, this.localName);\n    }\n    /**\n     * Called after element DOM has been rendered. Implement to\n     * directly control rendered DOM. Typically this is not needed as `lit-html`\n     * can be used in the `_render` method to set properties, attributes, and\n     * event listeners. However, it is sometimes useful for calling methods on\n     * rendered elements, like calling `focus()` on an element to focus it.\n     * @param _props Current element properties\n     * @param _changedProps Changing element properties\n     * @param _prevProps Previous element properties\n     */\n    _didRender(_props, _changedProps, _prevProps) { }\n    /**\n     * Call to request the element to asynchronously re-render regardless\n     * of whether or not any property changes are pending.\n     */\n    _requestRender() { this._invalidateProperties(); }\n    /**\n     * Override which provides tracking of invalidated state.\n     */\n    _invalidateProperties() {\n        this.__isInvalid = true;\n        super._invalidateProperties();\n    }\n    /**\n     * Returns a promise which resolves after the element next renders.\n     * The promise resolves to `true` if the element rendered and `false` if the\n     * element did not render.\n     * This is useful when users (e.g. tests) need to react to the rendered state\n     * of the element after a change is made.\n     * This can also be useful in event handlers if it is desireable to wait\n     * to send an event until after rendering. If possible implement the\n     * `_didRender` method to directly respond to rendering within the\n     * rendering lifecycle.\n     */\n    get renderComplete() {\n        if (!this.__renderComplete) {\n            this.__renderComplete = new Promise((resolve) => {\n                this.__resolveRenderComplete =\n                    (value) => {\n                        this.__resolveRenderComplete = this.__renderComplete = null;\n                        resolve(value);\n                    };\n            });\n            if (!this.__isInvalid && this.__resolveRenderComplete) {\n                Promise.resolve().then(() => this.__resolveRenderComplete(false));\n            }\n        }\n        return this.__renderComplete;\n    }\n}\n//# sourceMappingURL=lit-element.js.map"],"names":["window","JSCompiler_renameProperty","prop","dedupeId","dedupingMixin","mixin","mixinApplications","__mixinApplications","WeakMap","mixinDedupeId","base","baseSet","__mixinSet","map","extended","get","set","mixinSet","Object","create","microtaskCurrHandle","microtaskLastHandle","microtaskCallbacks","microtaskNodeContent","microtaskNode","document","createTextNode","MutationObserver","len","length","i","cb","e","setTimeout","splice","observe","characterData","microtask","run","callback","textContent","push","[object Object]","handle","idx","Error","PropertiesChanged","superClass","props","proto","this","prototype","_createPropertyAccessor","property","toLowerCase","name","readOnly","_addPropertyToAttributeMap","hasOwnProperty","__dataHasAccessor","assign","_definePropertyAccessor","__dataAttributes","attr","constructor","attributeNameForProperty","defineProperty","_getProperty","value","_setProperty","super","__dataEnabled","__dataReady","__dataInvalid","__data","__dataPending","__dataOld","__dataInstanceProps","__serializing","_initializeProperties","_flushProperties","p","_setPendingProperty","_invalidateProperties","ext","old","changed","_shouldPropertyChange","_initializeInstanceProperties","ready","changedProps","_shouldPropertiesChange","_propertiesChanged","currentProps","oldProps","Boolean","namespace","_attributeToProperty","attributeChangedCallback","attribute","type","_deserializeValue","typeForProperty","_valueToNodeAttribute","arguments","node","str","_serializeValue","undefined","removeAttribute","setAttribute","toString","Number","PropertiesMixin","superPropertiesClass","superCtor","getPrototypeOf","ownProperties","properties","output","o","normalizeProperties","__ownProperties","observedAttributes","_properties","keys","finalize","__finalized","_finalizeClass","createProperties","__properties","info","connectedCallback","_enableProperties","disconnectedCallback","templateCaches","Map","TemplateResult","strings","values","partCallback","defaultPartCallback","l","html","isTextBinding","s","closing","findTagClose","nodeMarker","marker","template","createElement","innerHTML","getHTML","render","result","container","templateFactory","templateCache","Template","getTemplateElement","instance","__templateInstance","_partCallback","update","TemplateInstance","fragment","_clone","removeNodes","firstChild","appendChild","String","Math","random","slice","markerRegex","RegExp","lastAttributeNameRegex","close","lastIndexOf","indexOf","TemplatePart","index","rawName","element","parts","walker","createTreeWalker","content","partIndex","nodesToRemove","previousNode","currentNode","nextNode","nodeType","hasAttributes","attributes","count","attributeNameInPart","exec","getNamedItem","stringsForAttributeValue","split","nodeValue","parent","parentNode","lastIndex","insertBefore","createComment","previousSibling","Node","TEXT_NODE","nextSibling","n","removeChild","getValue","part","isDirective","directiveValue","directive","f","__litDirective","isPrimitiveValue","AttributePart","size","_previousValues","startIndex","text","v","Array","isArray","Symbol","iterator","t","_equalToPreviousValues","join","_interpolate","NodePart","startNode","endNode","_previousValue","_setText","_setTemplateResult","_setIterable","_setNode","then","_setPromise","clear","_insert","_getTemplate","itemParts","item","itemPart","itemStart","setValue","lastPart","templatePart","getTemplate","_parts","valueIndex","importNode","reparentNodes","start","end","before","shadyTemplateFactory","scopeName","cacheKey","ShadyCSS","prepareTemplate","extendedPartCallback","substr","eventName","listener","_listener","removeEventListener","addEventListener","event","call","handleEvent","lastChar","keyMapCache","cleanMap","key","delete","min","max","emoji","_renderEmoji","bind","_setValueOnClick","staticAccessors","_render","ref","emojiArray","repeat","items","keyFnOrTemplate","keyFn","keyMap","currentMarker","console","error","forEach","HTMLElement","__renderComplete","__resolveRenderComplete","__isInvalid","__isChanging","_root","_createRoot","_firstRendered","attachShadow","mode","_props","_changedProps","_prevProps","shouldRender","_shouldRender","prevProps","_applyRender","_didRender","change","trace","baseRender","localName","renderComplete","Promise","resolve"],"mappings":"0KAUAA,OAAOC,0BAA4B,SAASC,GAAQ,OAAOA,GCD3D,IAGIC,EAAW,EAMf,MAiBaC,EAAgB,SAASC,GACpC,IAAIC,EAAiD,EAAQC,oBACxDD,IACHA,EAAoB,IAAIE,QACK,EAAQD,oBAAsBD,GAG7D,IAAIG,EAAgBN,IAqBpB,OApBA,SAAuBO,GACrB,IAAIC,EAAuC,EAAOC,WAClD,GAAID,GAAWA,EAAQF,GACrB,OAAOC,EAET,IAAIG,EAAMP,EACNQ,EAAWD,EAAIE,IAAIL,GAClBI,IACHA,EAAmC,EAAQJ,GAC3CG,EAAIG,IAAIN,EAAMI,IAKhB,IAAIG,EAAWC,OAAOC,OAAoC,EAAWP,YAAcD,GAAW,MAG9F,OAFAM,EAASR,IAAiB,EACG,EAAWG,WAAaK,EAC9CH,ICtCX,IAGIM,EAAsB,EACtBC,EAAsB,EACtBC,KACAC,EAAuB,EACvBC,EAAgBC,SAASC,eAAe,IAC5C,IAAI1B,OAAO2B,iBAEX,WACE,MAAMC,EAAMN,EAAmBO,OAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAKE,IAAK,CAC5B,IAAIC,EAAKT,EAAmBQ,GAC5B,GAAIC,EACF,IACEA,IACA,MAAOC,GACPC,WAAW,KAAQ,MAAMD,KAI/BV,EAAmBY,OAAO,EAAGN,GAC7BP,GAAuBO,IAfmBO,QAAQX,GAAgBY,eAAe,IAwBnF,MCvCMC,GDuKJC,IAAIC,IACFf,EAAcgB,YAAcjB,IAC5BD,EAAmBmB,KAAKF,GACjBnB,KAUTsB,OAAOC,GACL,MAAMC,EAAMD,EAAStB,EACrB,GAAIuB,GAAO,EAAG,CACZ,IAAKtB,EAAmBsB,GACtB,MAAM,IAAIC,MAAM,yBAA2BF,GAE7CrB,EAAmBsB,GAAO,QCtKnBE,EAAoB1C,EAAc2C,IAue7C,qBA9dgCA,EAQ9BL,wBAAwBM,GACtB,MAAMC,EAAQC,KAAKC,UACnB,IAAK,IAAIjD,KAAQ8C,EAET9C,KAAQ+C,GACZA,EAAMG,wBAAwBlD,GAcpCwC,gCAAgCW,GAC9B,OAAOA,EAASC,cAUlBZ,uBAAuBa,IAkBvBb,wBAAwBW,EAAUG,GAChCN,KAAKO,2BAA2BJ,GAC3BH,KAAKQ,eAAe,uBACvBR,KAAKS,kBAAoBzC,OAAO0C,UAAWV,KAAKS,oBAE7CT,KAAKS,kBAAkBN,KAC1BH,KAAKS,kBAAkBN,IAAY,EACnCH,KAAKW,wBAAwBR,EAAUG,IAW3Cd,2BAA2BW,GAIzB,GAHKH,KAAKQ,eAAe,sBACvBR,KAAKY,iBAAmB5C,OAAO0C,UAAWV,KAAKY,oBAE5CZ,KAAKY,iBAAiBT,GAAW,CACpC,MAAMU,EAAOb,KAAKc,YAAYC,yBAAyBZ,GACvDH,KAAKY,iBAAiBC,GAAQV,GAUjCX,wBAAwBW,EAAUG,GACjCtC,OAAOgD,eAAehB,KAAMG,GAG1BX,MACE,OAAOQ,KAAKiB,aAAad,IAG3BrC,IAAKwC,EAAW,aAAiB,SAAUY,GACzClB,KAAKmB,aAAahB,EAAUe,MAMlC1B,cACE4B,QACApB,KAAKqB,eAAgB,EACrBrB,KAAKsB,aAAc,EACnBtB,KAAKuB,eAAgB,EACrBvB,KAAKwB,UACLxB,KAAKyB,cAAgB,KACrBzB,KAAK0B,UAAY,KACjB1B,KAAK2B,oBAAsB,KAC3B3B,KAAK4B,eAAgB,EACrB5B,KAAK6B,wBAiBPrC,QACEQ,KAAKsB,aAAc,EACnBtB,KAAK8B,mBAYPtC,wBAIE,IAAK,IAAIuC,KAAK/B,KAAKS,kBACbT,KAAKQ,eAAeuB,KACtB/B,KAAK2B,oBAAsB3B,KAAK2B,wBAChC3B,KAAK2B,oBAAoBI,GAAK/B,KAAK+B,UAC5B/B,KAAK+B,IAkBlBvC,8BAA8BM,GAC5B9B,OAAO0C,OAAOV,KAAMF,GAYtBN,aAAaW,EAAUe,GACjBlB,KAAKgC,oBAAoB7B,EAAUe,IACrClB,KAAKiC,wBAUTzC,aAAaW,GACX,OAAOH,KAAKwB,OAAOrB,GAgBrBX,oBAAoBW,EAAUe,EAAOgB,GACnC,IAAIC,EAAMnC,KAAKwB,OAAOrB,GAClBiC,EAAUpC,KAAKqC,sBAAsBlC,EAAUe,EAAOiB,GAa1D,OAZIC,IACGpC,KAAKyB,gBACRzB,KAAKyB,iBACLzB,KAAK0B,eAGH1B,KAAK0B,WAAevB,KAAYH,KAAK0B,YACvC1B,KAAK0B,UAAUvB,GAAYgC,GAE7BnC,KAAKwB,OAAOrB,GAAYe,EACxBlB,KAAKyB,cAActB,GAAYe,GAE1BkB,EAWT5C,yBACOQ,KAAKuB,eAAiBvB,KAAKsB,cAC9BtB,KAAKuB,eAAgB,EACrBpC,EAAUC,IAAI,KACRY,KAAKuB,gBACPvB,KAAKuB,eAAgB,EACrBvB,KAAK8B,uBAiBbtC,oBACOQ,KAAKqB,gBACRrB,KAAKqB,eAAgB,EACjBrB,KAAK2B,sBACP3B,KAAKsC,8BAA8BtC,KAAK2B,qBACxC3B,KAAK2B,oBAAsB,MAE7B3B,KAAKuC,SAaT/C,mBACE,MAAMM,EAAQE,KAAKwB,OACbgB,EAAexC,KAAKyB,cACpBU,EAAMnC,KAAK0B,UACb1B,KAAKyC,wBAAwB3C,EAAO0C,EAAcL,KACpDnC,KAAKyB,cAAgB,KACrBzB,KAAK0B,UAAY,KACjB1B,KAAK0C,mBAAmB5C,EAAO0C,EAAcL,IAgBjD3C,wBAAwBmD,EAAcH,EAAcI,GAClD,OAAOC,QAAQL,GAejBhD,mBAAmBmD,EAAcH,EAAcI,IAqB/CpD,sBAAsBW,EAAUe,EAAOiB,GACrC,OAEGA,IAAQjB,IAENiB,GAAQA,GAAOjB,GAAUA,GAehC1B,yBAAyBa,EAAM8B,EAAKjB,EAAO4B,GACrCX,IAAQjB,GACVlB,KAAK+C,qBAAqB1C,EAAMa,GAE9BE,MAAM4B,0BACR5B,MAAM4B,yBAAyB3C,EAAM8B,EAAKjB,EAAO4B,GAgBrDtD,qBAAqByD,EAAW/B,EAAOgC,GACrC,IAAKlD,KAAK4B,cAAe,CACvB,MAAMjE,EAAMqC,KAAKY,iBACXT,EAAWxC,GAAOA,EAAIsF,IAAcA,EAC1CjD,KAAKG,GAAYH,KAAKmD,kBAAkBjC,EAAOgC,GAC7ClD,KAAKc,YAAYsC,gBAAgBjD,KAcvCX,qBAAqBW,EAAU8C,EAAW/B,GACxClB,KAAK4B,eAAgB,EAErB5B,KAAKqD,2BADLnC,EAASoC,UAAU3E,OAAS,EAAKqB,KAAKG,GAAYe,EAEhD+B,GAAajD,KAAKc,YAAYC,yBAAyBZ,IACzDH,KAAK4B,eAAgB,EAgBvBpC,sBAAsB+D,EAAMrC,EAAO+B,GACjC,MAAMO,EAAMxD,KAAKyD,gBAAgBvC,QACrBwC,IAARF,EACFD,EAAKI,gBAAgBV,GAErBM,EAAKK,aAAaX,EAAWO,GAejChE,gBAAgB0B,GACd,cAAeA,GACb,IAAK,UACH,OAAOA,EAAQ,QAAKwC,EACtB,QACE,OAAgB,MAATxC,EAAgBA,EAAM2C,gBAAaH,GAgBhDlE,kBAAkB0B,EAAOgC,GACvB,OAAQA,GACN,KAAKL,QACH,OAAkB,OAAV3B,EACV,KAAK4C,OACH,OAAOA,OAAO5C,GAChB,QACE,OAAOA,OCndjB,MAAa6C,EAAkB7G,EAAc2C,IAO5C,MAAMrC,EAAOoC,EAAkBC,GAS/B,SAASmE,EAAqBlD,GAC5B,MAAMmD,EAAYjG,OAAOkG,eAAepD,GAMxC,OAAQmD,EAAUhE,qBAAqB8D,IACmB,KAW5D,SAASI,EAAcrD,GACrB,IAAKA,EAAYN,eAAezD,0BAA0B,kBAAmB+D,IAAe,CAC1F,IAAIhB,EAAQ,KAERgB,EAAYN,eAAezD,0BAA0B,aAAc+D,KAAiBA,EAAYsD,aAClGtE,EAhFP,SAc6BA,GAC3B,MAAMuE,KACN,IAAK,IAAItC,KAAKjC,EAAO,CACnB,MAAMwE,EAAIxE,EAAMiC,GAChBsC,EAAOtC,GAAmB,mBAANuC,GAAqBpB,KAAMoB,GAAKA,EAEtD,OAAOD,EA4DME,CAAoBzD,EAAYsD,aAG1CtD,EAAY0D,gBAAkB1E,EAEhC,OAAOgB,EAAY0D,sBAUfT,UAAwBvG,EAO5BiH,gCACE,MAAM3E,EAAQE,KAAK0E,YACnB,OAAO5E,EAAQ9B,OAAO2G,KAAK7E,GAAOnC,IAAIoE,GAAK/B,KAAKe,yBAAyBgB,OAU3EvC,kBACE,IAAKQ,KAAKQ,eAAezD,0BAA0B,cAAeiD,OAAQ,CACxE,MAAMiE,EAAYD,QACdC,GACFA,EAAUW,WAEZ5E,KAAK6E,aAAc,EACnB7E,KAAK8E,kBAWTtF,wBACE,MAAMM,EAAQqE,QACVrE,GACFE,KAAK+E,iBAAiBjF,GAY1B4E,yBACE,IAAK1E,KAAKQ,eACRzD,0BAA0B,eAAgBiD,OAAQ,CAClD,MAAMiE,EAAYD,QAClBhE,KAAKgF,aAAehH,OAAO0C,UACzBuD,GAAaA,EAAUS,YACvBP,SAEJ,OAAOnE,KAAKgF,aAWdxF,uBAAuBa,GACrB,MAAM4E,EAAOjF,KAAK0E,YAAYrE,GAC9B,OAAO4E,GAAQA,EAAK/B,KAStB1D,wBACEQ,KAAKc,YAAY8D,WACjBxD,MAAMS,wBAURrC,oBACM4B,MAAM8D,mBACR9D,MAAM8D,oBAERlF,KAAKmF,oBAQP3F,uBACM4B,MAAMgE,sBACRhE,MAAMgE,wBAMZ,OAAOrB,IC1MKsB,EAAiB,IAAIC,UAerBC,EACT/F,YAAYgG,EAASC,EAAQvC,EAAMwC,EAAeC,GAC9C3F,KAAKwF,QAAUA,EACfxF,KAAKyF,OAASA,EACdzF,KAAKkD,KAAOA,EACZlD,KAAK0F,aAAeA,EAKxBlG,UACI,MAAMoG,EAAI5F,KAAKwF,QAAQ7G,OAAS,EAChC,IAAIkH,EAAO,GACPC,GAAgB,EACpB,IAAK,IAAIlH,EAAI,EAAGA,EAAIgH,EAAGhH,IAAK,CACxB,MAAMmH,EAAI/F,KAAKwF,QAAQ5G,GACvBiH,GAAQE,EAIR,MAAMC,EAAUC,EAAaF,GAE7BF,IADAC,EAAgBE,GAAW,EAAIA,EAAUD,EAAEpH,OAASmH,GAC5BI,EAAaC,EAGzC,OADAN,GAAQ7F,KAAKwF,QAAQI,GAGzBpG,qBACI,MAAM4G,EAAW7H,SAAS8H,cAAc,YAExC,OADAD,EAASE,UAAYtG,KAAKuG,UACnBH,GAsDf,SAAgBI,EAAOC,EAAQC,EAAWC,EA3B1C,SAAuCF,GACnC,IAAIG,EAAgBvB,EAAexH,IAAI4I,EAAOvD,WACxBQ,IAAlBkD,IACAA,EAAgB,IAAItB,IACpBD,EAAevH,IAAI2I,EAAOvD,KAAM0D,IAEpC,IAAIR,EAAWQ,EAAc/I,IAAI4I,EAAOjB,SAKxC,YAJiB9B,IAAb0C,IACAA,EAAW,IAAIS,EAASJ,EAAQA,EAAOK,sBACvCF,EAAc9I,IAAI2I,EAAOjB,QAASY,IAE/BA,IAiBP,MAAMA,EAAWO,EAAgBF,GACjC,IAAIM,EAAWL,EAAUM,mBAEzB,QAAiBtD,IAAbqD,GAA0BA,EAASX,WAAaA,GAChDW,EAASE,gBAAkBR,EAAOf,aAElC,YADAqB,EAASG,OAAOT,EAAOhB,QAI3BsB,EACI,IAAII,EAAiBf,EAAUK,EAAOf,aAAciB,GACxDD,EAAUM,mBAAqBD,EAC/B,MAAMK,EAAWL,EAASM,SAC1BN,EAASG,OAAOT,EAAOhB,QACvB6B,EAAYZ,EAAWA,EAAUa,YACjCb,EAAUc,YAAYJ,GAM1B,MAAMjB,WAAkBsB,OAAOC,KAAKC,UAAUC,MAAM,OAK9C1B,YAAoBC,UACpB0B,EAAc,IAAIC,UAAU3B,KAAUD,KA0BtC6B,EAAyB,yJAQ/B,SAAS9B,EAAazC,GAClB,MAAMwE,EAAQxE,EAAIyE,YAAY,KAE9B,OADazE,EAAI0E,QAAQ,IAAKF,EAAQ,IACvB,EAAIxE,EAAI7E,OAASqJ,QAkBvBG,EACT3I,YAAY0D,EAAMkF,EAAO/H,EAAMgI,EAAS7C,GACpCxF,KAAKkD,KAAOA,EACZlD,KAAKoI,MAAQA,EACbpI,KAAKK,KAAOA,EACZL,KAAKqI,QAAUA,EACfrI,KAAKwF,QAAUA,SAMVqB,EACTrH,YAAYiH,EAAQ6B,GAChBtI,KAAKuI,SACLvI,KAAKsI,QAAUA,EACf,MAEME,EAASjK,SAASkK,iBAFRzI,KAAKsI,QAAQI,QAEqB,IAClB,MAAM,GACtC,IAAIN,GAAS,EACTO,EAAY,EAChB,MAAMC,KAGN,IAAIC,EAEAC,EACJ,KAAON,EAAOO,YAAY,CACtBX,IACAS,EAAeC,EACf,MAAMvF,EAAOuF,EAAcN,EAAOM,YAClC,GAAsB,IAAlBvF,EAAKyF,SAAwC,CAC7C,IAAKzF,EAAK0F,gBACN,SAEJ,MAAMC,EAAa3F,EAAK2F,WAKxB,IAAIC,EAAQ,EACZ,IAAK,IAAIvK,EAAI,EAAGA,EAAIsK,EAAWvK,OAAQC,IAC/BsK,EAAWtK,GAAGsC,MAAMgH,QAAQ/B,IAAW,GACvCgD,IAGR,KAAOA,KAAU,GAAG,CAGhB,MAEMC,EAAsBrB,EAAuBsB,KAF7B5C,EAAOjB,QAAQmD,IAEkC,GAGjE1F,EAAYiG,EAAWI,aAAaF,GACpCG,EAA2BtG,EAAU/B,MAAMsI,MAAM3B,GACvD7H,KAAKuI,MAAMhJ,KAAK,IAAI4I,EAAa,YAAaC,EAAOnF,EAAU5C,KAAM+I,EAAqBG,IAC1FhG,EAAKI,gBAAgBV,EAAU5C,MAC/BsI,GAAaY,EAAyB5K,OAAS,QAGlD,GAAsB,IAAlB4E,EAAKyF,SAAqC,CAC/C,MAAMS,EAAYlG,EAAKkG,UACvB,GAAIA,EAAUvB,QAAQ/B,GAAU,EAC5B,SAEJ,MAAMuD,EAASnG,EAAKoG,WACdnE,EAAUiE,EAAUD,MAAM3B,GAC1B+B,EAAYpE,EAAQ7G,OAAS,EAEnCgK,GAAaiB,EAGb,IAAK,IAAIhL,EAAI,EAAGA,EAAIgL,EAAWhL,IAC3B8K,EAAOG,aAA6B,KAAfrE,EAAQ5G,GACvBL,SAASuL,cAAc,IACvBvL,SAASC,eAAegH,EAAQ5G,IAAK2E,GAC3CvD,KAAKuI,MAAMhJ,KAAK,IAAI4I,EAAa,OAAQC,MAE7CsB,EAAOG,aAAoC,KAAvBrE,EAAQoE,GACxBrL,SAASuL,cAAc,IACvBvL,SAASC,eAAegH,EAAQoE,IAAarG,GACjDqF,EAAcrJ,KAAKgE,QAElB,GAAsB,IAAlBA,EAAKyF,UACVzF,EAAKkG,YAActD,EAAQ,CAC3B,MAAMuD,EAASnG,EAAKoG,WAWdI,EAAkBxG,EAAKwG,gBACL,OAApBA,GAA4BA,IAAoBlB,GAChDkB,EAAgBf,WAAagB,KAAKC,UAClCP,EAAOG,aAAatL,SAASuL,cAAc,IAAKvG,GAGhD6E,IAEJpI,KAAKuI,MAAMhJ,KAAK,IAAI4I,EAAa,OAAQC,MACzCQ,EAAcrJ,KAAKgE,GAIM,OAArBA,EAAK2G,YACLR,EAAOG,aAAatL,SAASuL,cAAc,IAAKvG,GAGhD6E,IAEJU,EAAcD,EACdF,KAIR,IAAK,MAAMwB,KAAKvB,EACZuB,EAAER,WAAWS,YAAYD,IAWrC,MAAaE,EAAW,CAACC,EAAMpJ,IAGvBqJ,EAAYrJ,IACZA,EAAQA,EAAMoJ,GACPE,GAEM,OAAVtJ,OAAiBwC,EAAYxC,EAE3BuJ,EAAaC,IACtBA,EAAEC,gBAAiB,EACZD,GAELH,EAAejG,GAAmB,mBAANA,IAAyC,IAArBA,EAAEqG,eAK3CH,KACPI,EAAoB1J,GAAoB,OAAVA,KACb,iBAAVA,GAAuC,mBAAVA,SAC7B2J,EACTrL,YAAYuH,EAAUuB,EAASjI,EAAMmF,GACjCxF,KAAK+G,SAAWA,EAChB/G,KAAKsI,QAAUA,EACftI,KAAKK,KAAOA,EACZL,KAAKwF,QAAUA,EACfxF,KAAK8K,KAAOtF,EAAQ7G,OAAS,EAC7BqB,KAAK+K,mBAETvL,aAAaiG,EAAQuF,GACjB,MAAMxF,EAAUxF,KAAKwF,QACfI,EAAIJ,EAAQ7G,OAAS,EAC3B,IAAIsM,EAAO,GACX,IAAK,IAAIrM,EAAI,EAAGA,EAAIgH,EAAGhH,IAAK,CACxBqM,GAAQzF,EAAQ5G,GAChB,MAAMsM,EAAIb,EAASrK,KAAMyF,EAAOuF,EAAapM,IAC7C,GAAIsM,GAAKA,IAAMV,IACVW,MAAMC,QAAQF,IAAmB,iBAANA,GAAkBA,EAAEG,OAAOC,WACvD,IAAK,MAAMC,KAAKL,EAEZD,GAAQM,OAIZN,GAAQC,EAGhB,OAAOD,EAAOzF,EAAQI,GAE1BpG,uBAAuBiG,EAAQuF,GAC3B,IAAK,IAAIpM,EAAIoM,EAAYpM,EAAIoM,EAAahL,KAAK8K,KAAMlM,IACjD,GAAIoB,KAAK+K,gBAAgBnM,KAAO6G,EAAO7G,KAClCgM,EAAiBnF,EAAO7G,IACzB,OAAO,EAGf,OAAO,EAEXY,SAASiG,EAAQuF,GACb,GAAIhL,KAAKwL,uBAAuB/F,EAAQuF,GACpC,OAEJ,MAAMjF,EAAI/F,KAAKwF,QACf,IAAItE,EACa,IAAb6E,EAAEpH,QAAyB,KAAToH,EAAE,IAAsB,KAATA,EAAE,IAGnC7E,EAAQmJ,EAASrK,KAAMyF,EAAOuF,IAC1BG,MAAMC,QAAQlK,KACdA,EAAQA,EAAMuK,KAAK,MAIvBvK,EAAQlB,KAAK0L,aAAajG,EAAQuF,GAElC9J,IAAUsJ,GACVxK,KAAKsI,QAAQ1E,aAAa5D,KAAKK,KAAMa,GAEzClB,KAAK+K,gBAAkBtF,SAGlBkG,EACTnM,YAAYuH,EAAU6E,EAAWC,GAC7B7L,KAAK+G,SAAWA,EAChB/G,KAAK4L,UAAYA,EACjB5L,KAAK6L,QAAUA,EACf7L,KAAK8L,oBAAiBpI,EAE1BlE,SAAS0B,GAEL,IADAA,EAAQmJ,EAASrK,KAAMkB,MACTsJ,EAGd,GAAII,EAAiB1J,GAAQ,CAGzB,GAAIA,IAAUlB,KAAK8L,eACf,OAEJ9L,KAAK+L,SAAS7K,QAETA,aAAiBqE,EACtBvF,KAAKgM,mBAAmB9K,GAEnBiK,MAAMC,QAAQlK,IAAUA,EAAMmK,OAAOC,UAC1CtL,KAAKiM,aAAa/K,GAEbA,aAAiB8I,KACtBhK,KAAKkM,SAAShL,QAEMwC,IAAfxC,EAAMiL,KACXnM,KAAKoM,YAAYlL,GAIjBlB,KAAK+L,SAAS7K,GAGtB1B,QAAQ+D,GACJvD,KAAK6L,QAAQlC,WAAWE,aAAatG,EAAMvD,KAAK6L,SAEpDrM,SAAS0B,GACDlB,KAAK8L,iBAAmB5K,IAG5BlB,KAAKqM,QACLrM,KAAKsM,QAAQpL,GACblB,KAAK8L,eAAiB5K,GAE1B1B,SAAS0B,GACL,MAAMqC,EAAOvD,KAAK4L,UAAU1B,YAC5BhJ,OAAkBwC,IAAVxC,EAAsB,GAAKA,EAC/BqC,IAASvD,KAAK6L,QAAQ9B,iBACtBxG,EAAKyF,WAAagB,KAAKC,UAKvB1G,EAAKjE,YAAc4B,EAGnBlB,KAAKkM,SAAS3N,SAASC,eAAe0C,IAE1ClB,KAAK8L,eAAiB5K,EAE1B1B,mBAAmB0B,GACf,MAAMkF,EAAWpG,KAAK+G,SAASwF,aAAarL,GAC5C,IAAI6F,EACA/G,KAAK8L,gBAAkB9L,KAAK8L,eAAe1F,WAAaA,EACxDW,EAAW/G,KAAK8L,gBAGhB/E,EAAW,IAAII,EAAiBf,EAAUpG,KAAK+G,SAASE,cAAejH,KAAK+G,SAASwF,cACrFvM,KAAKkM,SAASnF,EAASM,UACvBrH,KAAK8L,eAAiB/E,GAE1BA,EAASG,OAAOhG,EAAMuE,QAE1BjG,aAAa0B,GAUJiK,MAAMC,QAAQpL,KAAK8L,kBACpB9L,KAAKqM,QACLrM,KAAK8L,mBAIT,MAAMU,EAAYxM,KAAK8L,eACvB,IAAInD,EAAY,EAChB,IAAK,MAAM8D,KAAQvL,EAAO,CAEtB,IAAIwL,EAAWF,EAAU7D,GAEzB,QAAiBjF,IAAbgJ,EAAwB,CAGxB,IAAIC,EAAY3M,KAAK4L,UAGrB,GAAIjD,EAAY,EAAG,CAEfgE,EADqBH,EAAU7D,EAAY,GAClBkD,QAAUtN,SAASC,eAAe,IAC3DwB,KAAKsM,QAAQK,GAEjBD,EAAW,IAAIf,EAAS3L,KAAK+G,SAAU4F,EAAW3M,KAAK6L,SACvDW,EAAUjN,KAAKmN,GAEnBA,EAASE,SAASH,GAClB9D,IAEJ,GAAkB,IAAdA,EACA3I,KAAKqM,QACLrM,KAAK8L,oBAAiBpI,OAErB,GAAIiF,EAAY6D,EAAU7N,OAAQ,CACnC,MAAMkO,EAAWL,EAAU7D,EAAY,GAEvC6D,EAAU7N,OAASgK,EACnB3I,KAAKqM,MAAMQ,EAAShB,QAAQ9B,iBAC5B8C,EAAShB,QAAU7L,KAAK6L,SAGhCrM,YAAY0B,GACRlB,KAAK8L,eAAiB5K,EACtBA,EAAMiL,KAAMjB,IACJlL,KAAK8L,iBAAmB5K,GACxBlB,KAAK4M,SAAS1B,KAI1B1L,MAAMoM,EAAY5L,KAAK4L,WACnBtE,EAAYtH,KAAK4L,UAAUjC,WAAYiC,EAAU1B,YAAalK,KAAK6L,UAG3E,MAAalG,EAAsB,CAACoB,EAAU+F,EAAcvJ,KACxD,GAA0B,cAAtBuJ,EAAa5J,KACb,OAAO,IAAI2H,EAAc9D,EAAUxD,EAAMuJ,EAAazM,KAAMyM,EAAatH,SAExE,GAA0B,SAAtBsH,EAAa5J,KAClB,OAAO,IAAIyI,EAAS5E,EAAUxD,EAAMA,EAAK2G,aAE7C,MAAM,IAAIvK,2BAA2BmN,EAAa5J,eAMzCiE,EACT3H,YAAY4G,EAAUV,EAAcqH,GAChC/M,KAAKgN,UACLhN,KAAKoG,SAAWA,EAChBpG,KAAKiH,cAAgBvB,EACrB1F,KAAKuM,aAAeQ,EAExBvN,OAAOiG,GACH,IAAIwH,EAAa,EACjB,IAAK,MAAM3C,KAAQtK,KAAKgN,YACFtJ,IAAd4G,EAAKQ,MACLR,EAAKsC,SAASnH,EAAOwH,IACrBA,MAGA3C,EAAKsC,SAASnH,EAAQwH,GACtBA,GAAc3C,EAAKQ,MAI/BtL,SACI,MAAM4H,EAAW7I,SAAS2O,WAAWlN,KAAKoG,SAASkC,QAAQI,SAAS,GAC9DH,EAAQvI,KAAKoG,SAASmC,MAC5B,GAAIA,EAAM5J,OAAS,EAAG,CAGlB,MAAM6J,EAASjK,SAASkK,iBAAiBrB,EAAU,IACnB,MAAM,GACtC,IAAIgB,GAAS,EACb,IAAK,IAAIxJ,EAAI,EAAGA,EAAI2J,EAAM5J,OAAQC,IAAK,CACnC,MAAM0L,EAAO/B,EAAM3J,GACnB,KAAOwJ,EAAQkC,EAAKlC,OAChBA,IACAI,EAAOO,WAEX/I,KAAKgN,OAAOzN,KAAKS,KAAKiH,cAAcjH,KAAMsK,EAAM9B,EAAOM,eAG/D,OAAO1B,GASf,MAAa+F,EAAgB,CAACzG,EAAW0G,EAAOC,EAAM,KAAMC,EAAS,QACjE,IAAI/J,EAAO6J,EACX,KAAO7J,IAAS8J,GAAK,CACjB,MAAMlD,EAAI5G,EAAK2G,YACfxD,EAAUmD,aAAatG,EAAM+J,GAC7B/J,EAAO4G,IAOF7C,EAAc,CAACZ,EAAWkF,EAAWC,EAAU,QACxD,IAAItI,EAAOqI,EACX,KAAOrI,IAASsI,GAAS,CACrB,MAAM1B,EAAI5G,EAAK2G,YACfxD,EAAU0D,YAAY7G,GACtBA,EAAO4G,ICxmBToD,EAAwBC,GAAe/G,IACzC,MAAMgH,KAAchH,EAAOvD,SAASsK,IACpC,IAAI5G,EAAgBvB,EAAexH,IAAI4P,QACjB/J,IAAlBkD,IACAA,EAAgB,IAAItB,IACpBD,EAAevH,IAAI2P,EAAU7G,IAEjC,IAAIR,EAAWQ,EAAc/I,IAAI4I,EAAOjB,SACxC,QAAiB9B,IAAb0C,EAAwB,CACxB,MAAMkC,EAAU7B,EAAOK,qBACQ,iBAApBhK,OAAO4Q,UACd5Q,OAAO4Q,SAASC,gBAAgBrF,EAASkF,GAE7CpH,EAAW,IAAIS,EAASJ,EAAQ6B,GAChC1B,EAAc9I,IAAI2I,EAAOjB,QAASY,GAEtC,OAAOA,GClBX,MAKaP,EAAO,CAACL,KAAYC,IAAW,IAAIF,EAAeC,EAASC,EAAQ,OAAQmI,GA8B3EA,EAAuB,CAAC7G,EAAU+F,EAAcvJ,KACzD,GAA0B,cAAtBuJ,EAAa5J,KAAsB,CACnC,GAA0C,QAAtC4J,EAAazE,QAAQwF,OAAO,EAAG,GAAc,CAE7C,OAAO,UAiEfrO,YAAYuH,EAAUuB,EAASwF,GAC3B9N,KAAK+G,SAAWA,EAChB/G,KAAKsI,QAAUA,EACftI,KAAK8N,UAAYA,EAErBtO,SAAS0B,GACL,MAAM6M,EAAW1D,EAASrK,KAAMkB,GAC5B6M,IAAa/N,KAAKgO,YAGN,MAAZD,EACA/N,KAAKsI,QAAQ2F,oBAAoBjO,KAAK8N,UAAW9N,MAE1B,MAAlBA,KAAKgO,WACVhO,KAAKsI,QAAQ4F,iBAAiBlO,KAAK8N,UAAW9N,MAElDA,KAAKgO,UAAYD,GAErBvO,YAAY2O,GACsB,mBAAnBnO,KAAKgO,UACZhO,KAAKgO,UAAUI,KAAKpO,KAAKsI,QAAS6F,GAES,mBAA/BnO,KAAKgO,UAAUK,aAC3BrO,KAAKgO,UAAUK,YAAYF,KAxFNpH,EAAUxD,EADbuJ,EAAazE,QAAQT,MAAM,IAGjD,MAAM0G,EAAWxB,EAAazM,KAAKwN,OAAOf,EAAazM,KAAK1B,OAAS,GACrE,GAAiB,MAAb2P,EAAkB,CAClB,MAAMjO,EAAOyM,EAAazM,KAAKuH,MAAM,GAAI,GACzC,OAAO,IAAIiD,EAAc9D,EAAUxD,EAAMlD,EAAMyM,EAAatH,SAEhE,GAAiB,MAAb8I,EAAkB,CAElB,OAAO,kBAauBzD,EACtCrL,SAASiG,EAAQuF,GACb,MAAMjF,EAAI/F,KAAKwF,QACf,GAAiB,IAAbO,EAAEpH,QAAyB,KAAToH,EAAE,IAAsB,KAATA,EAAE,GAanC,MAAM,IAAIpG,MAAM,2DAb8B,CAC9C,MAAMuB,EAAQmJ,EAASrK,KAAMyF,EAAOuF,IACpC,GAAI9J,IAAUsJ,EACV,OAEAtJ,EACAlB,KAAKsI,QAAQ1E,aAAa5D,KAAKK,KAAM,IAGrCL,KAAKsI,QAAQ3E,gBAAgB3D,KAAKK,SAzBN0G,EAAUxD,EAD7BuJ,EAAazM,KAAKuH,MAAM,GAAI,GACakF,EAAatH,SAEvE,OAAO,kBA+BmBqF,EAC9BrL,SAASiG,EAAQuF,GACb,MAAMjF,EAAI/F,KAAKwF,QACf,IAAItE,EACAlB,KAAKwL,uBAAuB/F,EAAQuF,MAMpC9J,EAHa,IAAb6E,EAAEpH,QAAyB,KAAToH,EAAE,IAAsB,KAATA,EAAE,GAG3BsE,EAASrK,KAAMyF,EAAOuF,IAItBhL,KAAK0L,aAAajG,EAAQuF,MAExBR,IACVxK,KAAKsI,QAAQtI,KAAKK,MAAQa,GAE9BlB,KAAK+K,gBAAkBtF,KAlDCsB,EAAUxD,EAAMuJ,EAAazE,QAASyE,EAAatH,SAE/E,OAAOG,EAAoBoB,EAAU+F,EAAcvJ,ICpDvD,MACMgL,EAAc,IAAIjR,QACxB,SAASkR,EAASlE,EAAMmE,EAAK9Q,GACpB2M,EAAKsB,UAAUjC,YAChBhM,EAAI+Q,OAAOD,qBCTjB,aACErN,aACApB,KAAK2O,IAAM,EACX3O,KAAK4O,IAAM,EACX5O,KAAKkB,MAAQ,EACblB,KAAK6O,MAAQ,KACb7O,KAAK8O,aAAe9O,KAAK8O,aAAaC,KAAK/O,MAC3CA,KAAKgP,iBAAmBhP,KAAKgP,iBAAiBD,KAAK/O,+HAGrDiP,EAdW7K,0BACT,OAASlD,MAAO4C,OAAQ6K,IAAK7K,OAAQ8K,IAAK9K,OAAQ+K,MAAOpH,qBAa3DyH,iBAAQC,OAAER,QAAKC,QAAK1N,UACZkO,oBAAuBC,OAAOT,IACpC,OAAO/I,gdDAX,SAAuByJ,EAAOC,EAAiBnJ,GAC3C,IAAIoJ,EAOJ,OANyB,IAArBlM,UAAU3E,OACVyH,EAAWmJ,EAEe,IAArBjM,UAAU3E,SACf6Q,EAAQD,GAEL9E,EAAWH,IACd,KAAMA,aAAgBqB,GAClB,MAAM,IAAIhM,MAAM,wCAEpB,IAAI8P,EAASlB,EAAY1Q,IAAIyM,QACd5G,IAAX+L,IACAA,EAAS,IAAInK,IACbiJ,EAAYzQ,IAAIwM,EAAMmF,IAE1B,MAAM/I,EAAY4D,EAAKsB,UAAUjC,WACjC,IAAIvB,GAAS,EACTsH,EAAgBpF,EAAKsB,UAAU1B,YACnC,IAAK,MAAMuC,KAAQ6C,EAAO,CACtB,IAAI7I,EACAgI,EACJ,IAEIhI,EAASL,EAASqG,IADhBrE,GAEFqG,EAAMe,EAAQA,EAAM/C,GAAQrE,EAEhC,MAAOtJ,GACH6Q,QAAQC,MAAM9Q,GACd,SAGJ,IAAI4N,EAAW+C,EAAO5R,IAAI4Q,GAC1B,QAAiB/K,IAAbgJ,EAAwB,CACxB,MAAMvG,EAAS5H,SAASC,eAAe,IACjCqN,EAAUtN,SAASC,eAAe,IACxCkI,EAAUmD,aAAa1D,EAAQuJ,GAC/BhJ,EAAUmD,aAAagC,EAAS6D,GAChChD,EAAW,IAAIf,EAASrB,EAAKvD,SAAUZ,EAAQ0F,QACnCnI,IAAR+K,GACAgB,EAAO3R,IAAI2Q,EAAK/B,QAGnB,GAAIgD,IAAkBhD,EAASd,UAAW,CAE3C,MAAMyB,EAAMX,EAASb,QAAQ3B,YACzBwF,IAAkBrC,GAClBF,EAAczG,EAAWgG,EAASd,UAAWyB,EAAKqC,QAKtDA,EAAgBhD,EAASb,QAAQ3B,YAErCwC,EAASE,SAASnG,GAGlBiJ,IAAkBpF,EAAKuB,UACvBvE,EAAYZ,EAAWgJ,EAAepF,EAAKuB,SAC3C4D,EAAOI,QAAQrB,ygBEzBKzK,EAAgB+L,cAC5CtQ,cACI4B,SAASkC,WACTtD,KAAK+P,iBAAmB,KACxB/P,KAAKgQ,wBAA0B,KAC/BhQ,KAAKiQ,aAAc,EACnBjQ,KAAKkQ,cAAe,EAMxB1Q,QACIQ,KAAKmQ,MAAQnQ,KAAKoQ,cAClBhP,MAAMmB,QACNvC,KAAKqQ,iBAST7Q,kBAQAA,cACI,OAAOQ,KAAKsQ,cAAeC,KAAM,SAYrC/Q,wBAAwBgR,EAAQC,EAAeC,GAC3C,MAAMC,EAAe3Q,KAAK4Q,cAAcJ,EAAQC,EAAeC,GAI/D,OAHKC,GAAgB3Q,KAAKgQ,yBACtBhQ,KAAKgQ,yBAAwB,GAE1BW,EAYXnR,cAAcgR,EAAQC,EAAeC,GACjC,OAAO,EASXlR,mBAAmBM,EAAO0C,EAAcqO,GACpCzP,MAAMsB,mBAAmB5C,EAAO0C,EAAcqO,GAC9C,MAAMpK,EAASzG,KAAKkP,QAAQpP,GACxB2G,QAAyB/C,IAAf1D,KAAKmQ,OACfnQ,KAAK8Q,aAAarK,EAAQzG,KAAKmQ,OAEnCnQ,KAAK+Q,WAAWjR,EAAO0C,EAAcqO,GACjC7Q,KAAKgQ,yBACLhQ,KAAKgQ,yBAAwB,GAGrCxQ,mBACIQ,KAAKkQ,cAAe,EACpBlQ,KAAKiQ,aAAc,EACnB7O,MAAMU,mBACN9B,KAAKkQ,cAAe,EASxB1Q,sBAAsBW,EAAUe,EAAOiB,GACnC,MAAM6O,EAAS5P,MAAMiB,sBAAsBlC,EAAUe,EAAOiB,GAM5D,OALI6O,GAAUhR,KAAKkQ,cACfP,QAAQsB,MAAM,+FACsB9Q,eAC5BH,KAAKiB,aAAad,WAAkBe,OAEzC8P,EAYXxR,QAAQgR,GACJ,MAAM,IAAI7Q,MAAM,6BASpBH,aAAaiH,EAAQlD,IJnJzB,SAAuBkD,EAAQC,EAAW8G,GAC/B0D,EAAWzK,EAAQC,EAAW6G,EAAqBC,IImJtDhH,CAAOC,EAAQlD,EAAMvD,KAAKmR,WAY9B3R,WAAWgR,EAAQC,EAAeC,IAKlClR,iBAAmBQ,KAAKiC,wBAIxBzC,wBACIQ,KAAKiQ,aAAc,EACnB7O,MAAMa,wBAaVmP,qBAaI,OAZKpR,KAAK+P,mBACN/P,KAAK+P,iBAAmB,IAAIsB,QAASC,IACjCtR,KAAKgQ,wBACD,CAAC9O,IACGlB,KAAKgQ,wBAA0BhQ,KAAK+P,iBAAmB,KACvDuB,EAAQpQ,QAGflB,KAAKiQ,aAAejQ,KAAKgQ,yBAC1BqB,QAAQC,UAAUnF,KAAK,IAAMnM,KAAKgQ,yBAAwB,KAG3DhQ,KAAK+P"}